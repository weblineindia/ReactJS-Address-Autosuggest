{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import React from \"react\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\n\nclass PlaceAddress extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      data: [],\n      name: \"\"\n    };\n    //service\n    this.handleScriptLoad = this.handleScriptLoad.bind(this);\n  }\n\n  /**\n   * This methos is used to handle google place autocomplete\n   */\n  handleScriptLoad() {\n    // Declare Options For Autocomplete\n    let options = {\n      types: [\"geocode\"]\n    };\n\n    // Initialize Google Autocomplete\n    this.autocomplete = new window.google.maps.places.Autocomplete(\n      document.getElementById(this.props.id),\n      options\n    );\n    // Avoid paying for data that you don't need by restricting the\n    // set of place fields that are returned to just the address\n    // components and formatted address\n    this.autocomplete.setFields([\"address_components\", \"formatted_address\"]);\n\n    // Fire Event when a suggested name is selected\n    this.autocomplete.addListener(\"place_changed\", this.handlePlaceSelect);\n  }\n\n  /**\n   * This method is used to select one of the autocomplete suggestions\n   */\n  handlePlaceSelect() {\n    let addressObject = this.autocomplete.getPlace();\n\n    if (addressObject) {\n      let address = addressObject.address_components;\n      if (address) {\n        this.setState({\n          city: address[0].long_name,\n          query: addressObject.formatted_address\n        });\n      }\n    }\n  }\n\n  render() {\n    const searchAddressOptions = {\n      componentRestrictions: { country: [this.props.country] }\n    };\n\n    return (\n      <div>\n        <PlacesAutocomplete\n          className=\"form-group\"\n          value={this.props.value}\n          onChange={this.props.onChange}\n          onFocus={this.handleScriptLoad}\n          onSelect={this.props.onSelect}\n          onLoad={this.handleScriptLoad}\n          searchOptions={ searchAddressOptions}\n        >\n          {({\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: this.props.placeholder,\n                  className: this.props.className\n                })}\n                autoFocus={true}\n                id={this.props.id}\n                data-elmkey={this.props.elmkey}\n                onKeyDown={this.props.onKeyDown}\n                onFocus={this.props.onFocus}\n                onBlur={this.props.onBlur}\n              />\n\n              <div className=\"autocomplete-dropdown-container\">\n                {this.state.data.length > 0\n                  ? this.state.data.map(suggestion => {\n                      let className = suggestion.active\n                        ? \"suggestion-item--active\"\n                        : \"suggestion-item\";\n                      let style = suggestion.active\n                        ? {\n                            backgroundColor: \" rgba(50, 50, 50, 0.8)\",\n                            padding: \"10px\",\n                            cursor: \"pointer\"\n                          }\n                        : {\n                            backgroundColor: \"rgba(50, 50, 50, 0.8)\",\n                            padding: \"10px\",\n                            cursor: \"pointer\"\n                          };\n                      return (\n                        <div\n                          {...getSuggestionItemProps(suggestion, {\n                            className,\n                            style\n                          })}\n                        >\n                          <span>\n                            <span className=\"map\"> {suggestion}</span>\n                          </span>\n                        </div>\n                      );\n                    })\n                  : suggestions.map(suggestion => {\n                      let className = suggestion.active\n                        ? \"suggestion-item--active\"\n                        : \"suggestion-item\";\n                      let style = suggestion.active\n                        ? {\n                            backgroundColor: \" rgba(50, 50, 50, 0.8)\",\n                            padding: \"10px\",\n                            cursor: \"pointer\"\n                          }\n                        : {\n                            backgroundColor: \"rgba(50, 50, 50, 0.8)\",\n                            padding: \"10px\",\n                            cursor: \"pointer\"\n                          };\n                      return (\n                        <div\n                          {...getSuggestionItemProps(suggestion, {\n                            className,\n                            style\n                          })}\n                        >\n                          <span>\n                            <span className=\"map\">\n                              {\" \"}\n                              {suggestion.description}\n                            </span>\n                          </span>\n                        </div>\n                      );\n                    })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n      </div>\n    );\n  }\n}\nexport default PlaceAddress;\n"],"names":["PlaceAddress","props","state","address","data","name","handleScriptLoad","bind","options","types","autocomplete","window","google","maps","places","Autocomplete","document","getElementById","id","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address_components","setState","city","long_name","query","formatted_address","render","searchAddressOptions","componentRestrictions","country","value","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","placeholder","className","elmkey","onKeyDown","onFocus","onBlur","length","map","suggestion","active","style","backgroundColor","padding","cursor","description","React","Component"],"mappings":"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"}